%% Load Files
clc; clf; close all; clear;

% set the directory path
new_dir_path = '..\samples\recordings\New\';
worn_dir_path = '..\samples\recordings\Worn\';

% get a list of all the files in the directory
new_files = readdir(new_dir_path,'txt');
worn_files = readdir(worn_dir_path,'txt');

% load the contents of all the files into MATLAB (this takes some time)
new_recordings = loadrecordings(new_files);
worn_recordings = loadrecordings(worn_files); 

% get the resultant bending moment in the x and y direction using the
% Euclidian theorem
new_mr = euclidian(new_recordings);

time = new_recordings{1}(525:745,5);

figure;
subplot(2,2,1);
plot(time,new_recordings{1}(525:745,3),LineWidth=1.5,Color="blue");
title("'New' tool beinding moment on the X-plane over time");
xlabel("Time (s)");
ylabel("Bending moment X (Nm)");
set(gca,"YLim",[-15,15])
set(gca,"XLim",[303.909,304.002])
subplot(2,2,2);
plot(time,new_recordings{1}(525:745,4),LineWidth=1.5,Color="red");
title("'New' tool beinding moment on the Y-plane over time");
xlabel("Time (s)");
ylabel("Bending moment Y (Nm)");
set(gca,"YLim",[-15,15])
set(gca,"XLim",[303.909,304.002])
subplot(2,2,[3,4]);
plot(time,new_mr{1}(525:745),LineWidth=1.5,Color="magenta");
title("'New' tool beinding moment magnitude over time");
xlabel("Time (s)");
ylabel("Bending moment magnitude (Nm)");
set(gca,"YLim",[0,15])
set(gca,"XLim",[303.909,304.002])

figure;
plot(time,new_mr{1}(525:745),LineWidth=1.5);
title("'New' tool beinding moment magnitude over time");
xlabel("Time (s)");
ylabel("Bending moment magnitude (Nm)");
set(gca,"YLim",[0,15])
set(gca,"XLim",[303.94,304.002])
hold on;
xline(303.9680,'r--',LineWidth=1.5)
xline(303.9704,'r--',LineWidth=1.5)
hold off

% TODO trim recordings to remove startup noise
new_mr_train = [];
% figure;
for i=1:ceil(length(new_mr)) 
    % subplot(ceil(length(new_mr)*percent_train),1,i);
    % plot(new_mr{i});
    % hold on;
    % xline(ceil(length(new_mr{i})*percent_samples),'LineWidth',3,'Color',"red");
    % hold off;
    new_mr_train = [new_mr_train ; new_mr{i}(1:ceil(length(new_mr{i})))];
end

worn_mr = euclidian(worn_recordings);

worn_mr_test = [];
for i=1:ceil(length(worn_mr))
    worn_mr_test = [worn_mr_test ; worn_mr{i}(:)];
end

disp('done loading')

%% Plot Recordings



%% Train CNN
clf; close(findall(groot, "Type", "figure"));

% wornData = readmatrix('../samples/original/worn_cutting_tool_samples.txt');
% newData = readmatrix('../samples/original/new_cutting_tool_samples.txt');

wornData = worn_mr_test;
newData = new_mr_train;

samplesPerGroup = 256;
numChannels = 1;
filterSize = 5;
numFilters = 2;

dataCutOff = min([length(wornData);length(newData)]);
dataCutOff = dataCutOff - mod(dataCutOff, samplesPerGroup);

wornData = wornData(1:dataCutOff);
newData = newData(1:dataCutOff);

figure; 
subplot(2,2,1); plot(wornData); ca = gca; ylim = ca.YLim; ca.XLim = [1 dataCutOff];
title('Worn Tool Time Domain');
xlabel("Sample")
ylabel("Amplitude (mV)")
subplot(2,2,2); plot(newData); set(gca, "YLim", ylim, "XLim", [1 dataCutOff]);
title('New Tool Time Domain');
xlabel("Sample")
ylabel("Amplitude (mV)")
subplot(2,2,3); plot(wornData); ca = gca; ylim = ca.YLim; ca.XLim = [6800 7000];
title('Worn Tool Time Domain Exerpt');
xlabel("Sample")
ylabel("Amplitude (mV)")
subplot(2,2,4); plot(newData); set(gca, "YLim", ylim, "XLim", [6800 7000]);
title('New Tool Time Domain Exerpt');
xlabel("Sample")
ylabel("Amplitude (mV)")

figure; 
wDfft = fft(wornData);
P2 = abs(wDfft/dataCutOff);
P1 = P2(1:dataCutOff/2+1);
P1(2:end-1) = 2*P1(2:end-1);
f = 2500/dataCutOff*(0:(dataCutOff/2));

subplot(1,2,1); plot(f,P1);
title('Worn Tool Single-Sided Aplitude Spectrum');
xlabel("f (Hz)")
ylabel("|A|")

nDfft = fft(newData);
P2 = abs(nDfft/dataCutOff);
P1 = P2(1:dataCutOff/2+1);
P1(2:end-1) = 2*P1(2:end-1);

subplot(1,2,2); plot(f,P1);
title('New Tool Single-Sided Aplitude Spectrum');
xlabel("f (Hz)")
ylabel("|A|")


numGroups = dataCutOff/samplesPerGroup;

newData = reshape(newData,[samplesPerGroup,numGroups]);
wornData = reshape(wornData,[samplesPerGroup,numGroups]);

numObservations = numGroups/numChannels;

if (floor(numObservations)~=numObservations)
    error("numObservations (calculated: %f) must be an integer!", numObservations);
end

data = populateData(samplesPerGroup,numChannels,numGroups,newData);
data = [data;populateData(samplesPerGroup,numChannels,numGroups,wornData)];

labels = ones(numObservations,1);
labels = string([labels;zeros(numObservations,1)]);
labels(labels=="0") = "Worn";
labels(labels=="1") = "New";
labels = categorical(labels);

numObservations = numObservations*2;
[idxTrain,idxValidation,idxTest] = trainingPartitions(numObservations, [0.8 0.1 0.1]);
XTrain = data(idxTrain);
TTrain = labels(idxTrain);

XValidation = data(idxValidation);
TValidation = labels(idxValidation);

XTest = data(idxTest);
TTest = labels(idxTest);

classNames = categories(TTrain);
numClasses = numel(classNames);

layers = [ ...
    sequenceInputLayer(numChannels)
    convolution1dLayer(filterSize,numFilters,Padding="causal")
    reluLayer
    %layerNormalizationLayer
    % convolution1dLayer(filterSize,2*numFilters,Padding="causal")
    % reluLayer
    %layerNormalizationLayer
    globalAveragePooling1dLayer
    fullyConnectedLayer(numClasses)
    softmaxLayer];

options = trainingOptions("adam", ...
    MaxEpochs=60, ...
    InitialLearnRate=0.01, ...
    SequencePaddingDirection="left", ...
    ValidationData={XValidation,TValidation}, ...
    Plots="training-progress", ...
    Metrics="accuracy", ...
    Verbose=false);

net = dlnetwork(layers);

%figure;
%plot(net)

trainedNet = trainnet(XTrain,TTrain,net,"crossentropy",options);
save trainedNet;

scores = minibatchpredict(trainedNet,XTest,SequencePaddingDirection="left");
YTest = scores2label(scores, classNames);

%accuracy = mean(YTest == TTest)

%% Analyse

TP = sum(TTest == "" & predicted == positiveClass);
FP = sum(actual ~= positiveClass & predicted == positiveClass);
FN = sum(actual == positiveClass & predicted ~= positiveClass);
TN = sum(actual ~= positiveClass & predicted ~= positiveClass);


precision = 
recall = 
f1 = 

figure;
confusionchart(TTest,YTest)

csvwrite("../weights/latest/conv1d_weights.csv", trainedNet.Learnables.Value{1,1})
csvwrite("../weights/latest/conv1d_biases.csv", trainedNet.Learnables.Value{2,1})
csvwrite("../weights/latest/fc_weights.csv", trainedNet.Learnables.Value{3,1})
csvwrite("../weights/latest/fc_biases.csv", trainedNet.Learnables.Value{4,1})